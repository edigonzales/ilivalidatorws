<?xml version="1.0" encoding="UTF-8"?>

<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>ch.so.agi</groupId>
    <artifactId>ilivalidatorws</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>ilivalidatorws-server</artifactId>
  <!--<packaging>war</packaging>-->
  <properties>
    <java.version>17</java.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>ilivalidatorws-shared</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- only needed if you are using GWT-RPC -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>

<dependency>
    <groupId>org.xerial</groupId>
    <artifactId>sqlite-jdbc</artifactId>
    <version>3.41.2.2</version>
</dependency> 
<!-- jobrunr verwendet eine zu alte ASM-Version für Java 17. -->
<dependency> 
    <groupId>org.jobrunr</groupId> 
    <artifactId>jobrunr-spring-boot-2-starter</artifactId> 
    <version>6.2.0</version> 
    <exclusions>
        <exclusion>
            <groupId>org.ow2.asm</groupId>
            <artifactId>ams</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.ow2.asm</groupId>
    <artifactId>asm</artifactId>
    <version>9.1</version>
</dependency>
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.12.0</version>
</dependency>

<dependency>
    <groupId>org.carlspring.cloud.aws</groupId>
    <artifactId>s3fs-nio</artifactId>
    <version>1.0.1</version>
</dependency>

<dependency>
    <groupId>ch.interlis</groupId>
    <artifactId>ilivalidator</artifactId>
    <version>1.13.3</version>
</dependency>
<dependency>
    <groupId>io.github.sogis</groupId>
    <artifactId>ilivalidator-custom-functions</artifactId>
    <version>1.1.51</version>
</dependency>
<dependency>
    <groupId>io.github.sogis</groupId>
    <artifactId>ilivalidator-custom-functions-geometries</artifactId>
    <version>0.0.8</version>
</dependency>
<dependency>
    <groupId>ch.geowerkstatt.ilivalidator.extensions.functions</groupId>
    <artifactId>geow-interlis-functions</artifactId>
    <version>0.1.10-SNAPSHOT</version>
</dependency>

<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-ui</artifactId>
    <version>1.7.0</version>
</dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

<dependency>
    <groupId>org.testcontainers</groupId>
    <artifactId>testcontainers</artifactId>
    <version>1.18.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.testcontainers</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>1.18.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.awaitility</groupId>
    <artifactId>awaitility</artifactId>
    <version>4.2.0</version>
    <scope>test</scope>
</dependency> 
    
  </dependencies>
  <repositories>
      
    <repository>
      <id>interlis</id>
      <url>https://jars.interlis.ch/</url>
      <snapshots>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </repository>
    <repository>
      <id>sonatype releases</id>
      <url>https://s01.oss.sonatype.org/service/local/repositories/releases/content/</url>
      <snapshots>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </repository>
    <repository>
      <id>sonatype snapshots</id>
      <url>https://s01.oss.sonatype.org/service/local/repositories/snapshots/content/</url>
      <snapshots>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </repository>
    
  </repositories>
  <build>
    <finalName>ilivalidatorws</finalName>
    <plugins>


      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Kein Fat-Jar, weil sonst der Classpath für eine ilivalidator custom function nicht funktionert. 
          Java meldet ".", die Funktioner erwartet eine Liste mit *.jar-Dateien. 
          Während dem Entwickeln muss aber auf skip=false umgestellt werden. -->  
          <skip>true</skip> 
          <layout>JAR</layout>

        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/${project.build.finalName}/</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources/public/</directory>
                  <includes>
                    <include>**/*.*</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--  Avoid a clash between Spring Boot repackaging and native-maven-plugin:
            Main-Klasse wird von native-image nicht gefunden. -->
      <!-- Ohne native nicht mehr zwingend notwendig. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <classifier>exec</classifier>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <!-- XXX: We want to exclude ilivalidatorws-client from 'env-dev' profile, Maven forces us to make a 'env-prod' profile -->
      <id>env-prod</id>
      <activation></activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
                <groups>docker</groups>
                <excludedGroups>docker</excludedGroups>
            </configuration>
          </plugin>
      
          <!-- Das ist "build smell", weil das Entpacken vor dem Packen kommt. Eclipse und Maven reklamiert auch. Siehe README.md -->
          <!-- Der Original-Archtype verwendet war-Packaging. Darum geht es in diesem Fall, wenn man bloss das war-File reinkopiert.
               Wenn wir wie hier jar-Packaging verwenden, muss das war-File entpackt werden und die Inhalte reinkopiert werden. -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.1.1</version>
            <executions>
              <execution>
                <id>unpack-gwt-war</id>
                <phase>compile</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>ilivalidatorws-client</artifactId>
                      <version>${project.version}</version>
                      <type>war</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${project.build.directory}/classes/public</outputDirectory>
                      <includes>app/</includes>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
              
              <!-- Die Dependencies in das target/lib-Verzeichnis kopieren. Wir builden (momentan) keine Fat-Jar-Datei.  -->
        <execution>
            <phase>prepare-package</phase>
            <goals>
                <goal>copy-dependencies</goal>
            </goals>
            <configuration>
                <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
        </execution>

            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>env-dev</id>
      <activation>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
    </profile>
  </profiles>
</project>
